summarize_all(sum) %>%
mutate(per_pupil_expend = total_expend / Enrollment) %>%
mutate_at(vars(Pct_Black:Pct_Expelled), funs(. / Enrollment * 100))
# Read and Clean Graduation Data
graduation_xl <- read_excel('data/data_graduation_cohort_2015-16.xlsx', sheet = 'Graduation Cohort Data')
graduation_df <- data.frame(graduation_xl) %>%
lapply(function(x) if(is.character(x)) tolower(x) else x) %>%
data.frame() %>%
select(system = District.ID, district_name = District.Name, school_name = School.Name, graduate_count = X2015.Graduate.Count, cohort_count = X2015.Cohort.Count, graduation_rate = X2015.Graduation.Rate) %>%
merge(crosswalk_df)
# Roll up IRS by county
IRS_2015_by_county_df <- IRS_data_by_year_df %>%
filter(AGI_range == 'total', year == 2015) %>%
group_by(county) %>%
summarize_at(vars(return_count:refund_amount), sum) %>%
merge(zips_df %>% group_by(county) %>% select(county, county_lat, county_lon) %>% distinct()) %>%
mutate(joint_return_pct = joint_return_count / return_count * 100,
head_house_return_pct = head_house_return_count / return_count * 100,
avg_AGI_per_return = AGI_amount / return_count,
pct_earners = salary_and_wages_count / return_count * 100,
farms_pct = farm_income_count / return_count * 100,
unemployment_pct = unemployment_income_count / return_count * 100,
taxable_income_pct = taxable_income_count / return_count * 100,
char_contrib_pct = charitable_contributions_count / return_count * 100)
#Roll up graduation data by county
grad_by_county_df <- graduation_df %>%
filter(school_name == "all schools") %>%
group_by(county) %>%
summarize_at(vars(graduate_count, cohort_count), sum) %>%
mutate(county_grad_rate = graduate_count/cohort_count*100)
#ROLLUP EDUCATION 2015 TO COUNTY LEVEL
education_by_county_and_subj_2015_df <-
education_all_df %>%
filter(subgroup == 'all students', grade == 'all grades') %>%
group_by(county, subject) %>%
summarize_at(vars(valid_tests:n_prof_and_above), sum)
education_by_county_2015_df <-
education_by_county_and_subj_2015_df %>%
select(-contains('pct')) %>%
group_by(county) %>%
summarize_at(vars(valid_tests:n_prof_and_above), sum) %>%
mutate(pct_bsc_and_below = n_bsc_and_below / valid_tests * 100,
pct_prof_and_above = n_prof_and_above / valid_tests * 100) %>%
merge(grad_by_county_df) %>%
merge(edu_demo_by_county_df)
#MERGE ROLLED UP EDUCATION WITH IRS
edu_IRS_data_2015_df <- education_by_county_2015_df %>%
merge(IRS_2015_by_county_df) %>%
mutate_at(vars(county), funs(gsub(' county', '', .)))
#Base Map Data for TN Counties
TN_counties <- map_data("county", "tennessee")
colnames(TN_counties)[6] <- "county"
TN_counties$county <- gsub("de kalb", "dekalb", TN_counties$county, fixed = TRUE)
# Joining the maping data
mapping_edu_IRS_df <- edu_IRS_data_2015_df %>%
right_join(TN_counties)
options(scipen = 999)
# Maps for Income
mapping_edu_IRS_df%>%
ggplot(aes(x = long, y = lat, group = county, fill = avg_AGI_per_return)) +
geom_polygon() +
coord_equal() +
scale_fill_viridis(direction = -1, na.value = "gray") +
theme(plot.title = element_text(hjust = 0.5),axis.title.x=element_blank(),axis.title.y=element_blank(),
axis.text.x=element_blank(),axis.text.y=element_blank(),
axis.ticks.x=element_blank(),axis.ticks.y=element_blank())+
ggtitle("Average AGI Per Return")
mapping_edu_IRS_df %>%
ggplot(aes(x = long, y = lat, group = county, fill = farms_pct)) +
geom_polygon() +
coord_equal() +
scale_fill_viridis(direction = -1, na.value = "gray") +
theme(plot.title = element_text(hjust = 0.5),axis.title.x=element_blank(),axis.title.y=element_blank(),
axis.text.x=element_blank(),axis.text.y=element_blank(),
axis.ticks.x=element_blank(),axis.ticks.y=element_blank())+
ggtitle("Percentages of Returns With Farm Income")
mapping_edu_IRS_df %>%
ggplot(aes(x = long, y = lat, group = county, fill = unemployment_pct)) +
geom_polygon() +
coord_equal() +
scale_fill_viridis(direction = -1, na.value = "gray") +
theme(plot.title = element_text(hjust = 0.5),axis.title.x=element_blank(),axis.title.y=element_blank(),
axis.text.x=element_blank(),axis.text.y=element_blank(),
axis.ticks.x=element_blank(),axis.ticks.y=element_blank())+
ggtitle("Percentages of Returns With Unemployment Income")
##############MAPS FOR EDUCATION######################
mapping_edu_IRS_df %>%
ggplot(aes(x = long, y = lat, group = county, fill = pct_prof_and_above)) +
geom_polygon() +
coord_equal() +
scale_fill_viridis(direction = -1, na.value = "gray") +
theme(plot.title = element_text(hjust = 0.5),axis.title.x=element_blank(),axis.title.y=element_blank(),
axis.text.x=element_blank(),axis.text.y=element_blank(),
axis.ticks.x=element_blank(),axis.ticks.y=element_blank())+
ggtitle("Percent of State Assessments Passed (All Subjects)")
mapping_edu_IRS_df %>%
ggplot(aes(x = long, y = lat, group = county, fill = county_grad_rate)) +
geom_polygon() +
coord_equal() +
scale_fill_viridis(direction = -1, na.value = "gray") +
theme(plot.title = element_text(hjust = 0.5),axis.title.x=element_blank(),axis.title.y=element_blank(),
axis.text.x=element_blank(),axis.text.y=element_blank(),
axis.ticks.x=element_blank(),axis.ticks.y=element_blank())+
ggtitle("Graduation Rates")
mapping_edu_IRS_df %>%
ggplot(aes(x = long, y = lat, group = county, fill = Pct_ED)) +
geom_polygon() +
coord_equal() +
scale_fill_viridis(direction = -1, na.value = "gray") +
theme(plot.title = element_text(hjust = 0.5),axis.title.x=element_blank(),axis.title.y=element_blank(),
axis.text.x=element_blank(),axis.text.y=element_blank(),
axis.ticks.x=element_blank(),axis.ticks.y=element_blank())+
ggtitle("Percent of Economically Disadvantaged Students")
mapping_edu_IRS_df%>%
ggplot(aes(x = long, y = lat, group = county, fill = Pct_BHN)) +
geom_polygon() +
coord_equal() +
scale_fill_viridis(direction = -1, na.value = "gray") +
theme(plot.title = element_text(hjust = 0.5),axis.title.x=element_blank(),axis.title.y=element_blank(),
axis.text.x=element_blank(),axis.text.y=element_blank(),
axis.ticks.x=element_blank(),axis.ticks.y=element_blank())+
ggtitle("Percentage of Minority Students (Black/Hispanic/Native American)")
mapping_edu_IRS_df %>%
ggplot(aes(x = long, y = lat, group = county, fill = per_pupil_expend)) +
geom_polygon() +
coord_equal() +
scale_fill_viridis(direction = -1, na.value = "gray") +
theme(plot.title = element_text(hjust = 0.5),axis.title.x=element_blank(),axis.title.y=element_blank(),
axis.text.x=element_blank(),axis.text.y=element_blank(),
axis.ticks.x=element_blank(),axis.ticks.y=element_blank())+
ggtitle("Per Pupil Expenditures")
##############CORRELATIONS######################
# edu_IRS_data_2015_df %>%
#   select(contains('pct'), county_grad_rate, per_pupil_expend) %>%
#   ggcorr(type = "lower",
#          #lab = TRUE,
#          #lab_size = 3,
#          #method="circle",
#          colors = c("tomato2", "white", "springgreen3"),
#          title="Correlogram of Education/Income Data",
#          ggtheme=theme_bw)
#-----Based on this chart, it looks like I should analyze:
# * pct_bsc_and_below ~ Pct_ED
# * pct_prof_and_above ~ taxable_income_pct
# * Pct_Black(BHN) ~ Pct_Suspended
# * Pct_Black(BHN) ~ joint_return_pct
# * Pct_Suspended(Expelled) ~ head_house_return_pct (joint_return_pct)
edu_IRS_data_2015_df %>%
ggplot(aes(x = Pct_ED, y = pct_bsc_and_below)) +
geom_point(na.rm = TRUE) +
stat_smooth(method="lm")
edu_IRS_data_2015_df %>%
ggplot(aes(x = taxable_income_pct, y = pct_prof_and_above)) +
geom_point(na.rm = TRUE) +
stat_smooth(method="lm")
edu_IRS_data_2015_df %>%
ggplot(aes(x = Pct_BHN, y = Pct_Suspended)) +
geom_point(na.rm = TRUE) +
stat_smooth(method="lm")
edu_IRS_data_2015_df %>%
ggplot(aes(x = Pct_BHN, y = joint_return_pct)) +
geom_point(na.rm = TRUE) +
stat_smooth(method="lm")
edu_IRS_data_2015_df %>%
ggplot(aes(x = joint_return_pct, y = Pct_Suspended)) +
geom_point(na.rm = TRUE) +
stat_smooth(method="lm")
##############ANALYSIS OF PER PUPIL EXPENDITURES VS PCT OF PASSING TEST SCORES#########################
edu_IRS_data_2015_df %>%
ggplot(aes(x = per_pupil_expend, y = pct_prof_and_above)) +
geom_point(na.rm = TRUE)
##############ANALYSIS OF PCT ENROLLMENT ED VS PASSING TESTS#########################
edu_IRS_data_2015_df %>%
ggplot(aes(x = Pct_ED, y = pct_prof_and_above)) +
geom_point(na.rm = TRUE) +
stat_smooth(method="lm")
##############ANALYSIS OF PCT PASSING TEST SCORES VS PCT ENROLLMENT ED#########################
edu_IRS_data_2015_df %>%
ggplot(aes(x = pct_prof_and_above, y = Pct_ED)) +
geom_point(na.rm = TRUE) +
stat_smooth(method="lm")
#############Expenditures Per Pupil Compared to Average#######################
edu_IRS_data_2015_df$per_pupil_expend_z <- round((edu_IRS_data_2015_df$per_pupil_expend - mean(edu_IRS_data_2015_df$per_pupil_expend))/sd(edu_IRS_data_2015_df$per_pupil_expend), 2)  # compute normalized mpg
edu_IRS_data_2015_df$per_pupil_expend_type <- ifelse(edu_IRS_data_2015_df$per_pupil_expend_z < 0, "below", "above")  # above / below avg flag
edu_IRS_data_2015_df <- edu_IRS_data_2015_df[order(edu_IRS_data_2015_df$per_pupil_expend_z), ]  # sort
edu_IRS_data_2015_df$`county` <- factor(edu_IRS_data_2015_df$`county`, levels = edu_IRS_data_2015_df$`county`)  # convert to factor to retain sorted order in plot.
# Diverging Barcharts
ggplot(edu_IRS_data_2015_df, aes(x=`county`, y=per_pupil_expend_z, label=per_pupil_expend_z)) +
geom_bar(stat='identity', aes(fill=per_pupil_expend_type), width=.5)  +
scale_fill_manual(name="Per Pupil Expenditures",
labels = c("Above Average", "Below Average"),
values = c("above"="#00ba38", "below"="#f8766d")) +
labs(subtitle="Normalized Per Pupil Expenditures") +
coord_flip()
getwd
getwd
> getwd()
getwd()
> set("C:/Users/Dereje/NSSDS/Git/data-question-4-data-question-4-impact-squad")
library(dplyr)
library(ggplot2)
library(rjson)
library(jsonlite)
library(leaflet)
library(RCurl)
r_birthplace_map <- leaflet() %>%
addTiles() %>%  # use the default base map which is OpenStreetMap tiles
addMarkers(lng=174.768, lat=-36.852,
popup="The birthplace of R")
r_birthplace_map
library(maps)
r_birthplace_map <- leaflet() %>%
addTiles() %>%  # use the default base map which is OpenStreetMap tiles
addMarkers(lng=174.768, lat=-36.852,
popup="The birthplace of R")
r_birthplace_map
library(ggmp)
library(ggmap)
r_birthplace_map <- leaflet() %>%
addTiles() %>%  # use the default base map which is OpenStreetMap tiles
addMarkers(lng=174.768, lat=-36.852,
popup="The birthplace of R")
r_birthplace_map
setwd("C:/Users/Dereje/NSSDS/Testing/Traffic-Fatalities-in-the-US-2016")
library(shiny)
library(shinythemes)
library(readr)
library(ggplot2)
library(stringr)
library(plyr)
library(tidyverse)
library(dplyr)
library(magrittr)
library(DT)
library(tools)
library(labelled)
library(gridExtra)
library(maps)
library(leaflet)
fatality_df_V1 <- read_csv("fatality_df_V1.csv")
g1 <- ggplot(data=fatality_df, aes(fatality_df$HOUR, na.rm=TRUE)) +
geom_histogram(breaks=seq(0, 24, by=1), col="#e2240f",
fill="#ffff88", alpha=0.4) +
labs(x="Hour of Day", y="Number of Accidents")
g2 <- ggplot(data=fatality_df, aes(fatality_df$DAY_WEEK)) +
geom_histogram(breaks=seq(0, 7, by=1), col="yellow",
fill="#e2240f", alpha=0.4) +
labs(x="Day of Week (Sun-Sat)")
g3 <- ggplot(data=fatality_df, aes(fatality_df$MONTH)) +
geom_histogram(breaks=seq(0, 12, by=1), col="yellow",
fill="#e2240f", alpha=0.4) +
labs(x="Month (Jan-Dec)")
grid.arrange(g1, g2, g3, nrow=2)
g1 <- ggplot(data=fatality_df_V1, aes(fatality_df_V1$HOUR, na.rm=TRUE)) +
geom_histogram(breaks=seq(0, 24, by=1), col="#e2240f",
fill="#ffff88", alpha=0.4) +
labs(x="Hour of Day", y="Number of Accidents")
g2 <- ggplot(data=fatality_df_V1, aes(fatality_df_V1$DAY_WEEK)) +
geom_histogram(breaks=seq(0, 7, by=1), col="yellow",
fill="#e2240f", alpha=0.4) +
labs(x="Day of Week (Sun-Sat)")
g3 <- ggplot(data=fatality_df_V1, aes(fatality_df_V1$MONTH)) +
geom_histogram(breaks=seq(0, 12, by=1), col="yellow",
fill="#e2240f", alpha=0.4) +
labs(x="Month (Jan-Dec)")
grid.arrange(g1, g2, g3, nrow=2)
names(fatality_df_V1)
runApp('Fatality_Analysis')
runApp('Fatality_Analysis')
runApp('Fatality_Analysis')
runApp('App_test')
runApp('App_test')
runApp('App_test')
library(shiny)
library(shinythemes)
library(readr)
library(ggplot2)
library(stringr)
library(plyr)
library(tidyverse)
library(dplyr)
library(magrittr)
library(DT)
library(tools)
library(labelled)
library(gridExtra)
library(maps)
library(leaflet)
fatality_df_V1 <- read_csv("fatality_df_V1.csv")
# Fatality by time
g1 <- ggplot(data=fatality_df_V1, aes(fatality_df_V1$HOUR, na.rm=TRUE)) +
geom_histogram(breaks=seq(0, 24, by=1), col="#e2240f",
fill="#ffff88", alpha=0.4) +
labs(x="Hour of Day", y="Number of Accidents")
g2 <- ggplot(data=fatality_df_V1, aes(fatality_df_V1$DAY_WEEK)) +
geom_histogram(breaks=seq(0, 7, by=1), col="yellow",
fill="#e2240f", alpha=0.4) +
labs(x="Day of Week (Sun-Sat)")
g3 <- ggplot(data=fatality_df_V1, aes(fatality_df_V1$MONTH)) +
geom_histogram(breaks=seq(0, 12, by=1), col="yellow",
fill="#e2240f", alpha=0.4) +
labs(x="Month (Jan-Dec)")
grid.arrange(g1, g2, g3, nrow=2)
hist(fatality_df_V1$GENDER)
hist(fatality_df_V1$HOUR)
runApp('App_test')
runApp('App_test')
runApp('App_test')
runApp('App_test')
runApp('App_test')
runApp('App_test')
runApp('App_test')
runApp('App_test')
ggplot(fatality_df_V1, aes(x=GENDER,  y=STATE))+geom_bar(stat="identity")
x<-fatality_df_V1 %>%
group_by(STATE) %>%
summarise(sum(FATALS))
View(x)
x<-fatality_df_V1 %>%
group_by(STATE) %>%
summarise(state_fatal=sum(FATALS))
View(x)
ggplot(fatality_df_V1, aes(x=GENDER,  y=STATE))+geom_bar(stat="identity")
x %>%
sum(state_fatal)
x %>%
summarise(sum(state_fatal))
x<-fatality_df_V1 %>%
group_by(STATE,ST_CASE) %>%
summarise(state_fatal=sum(FATALS))
x %>%
summarise(sum(state_fatal))
View(x)
x %>%
group_by(STATE)
summarise(sum(state_fatal))
x %>%
group_by(STATE) %>%
summarise(sum(state_fatal))
x %>%
group_by(STATE) %>% sum(state_fatal)
View(x)
x %>%
group_by(STATE)%>%
sum(state_fatal)
x%>%
group_by(STATE)%>%
sum(state_fatal)
x%>%
group_by(STATE)%>%
summarise(sum(state_fatal))
x%>%
summarise(sum(state_fatal))
x%>%
summarise(sum(`sum(state_fatal)`))
x %>%
group_by(STATE) %>%
mutate(sum(state_fatal))
x %>%
group_by(STATE) %>%
mutate(fatal=sum(state_fatal))
x<-x %>%
group_by(STATE) %>%
mutate(fatal=sum(state_fatal))
View(x)
ggplot(x, aes(x=fatal,  y=STATE))+geom_bar(stat="identity")
ggplot(x, aes(x=fatal))+geom_bar(stat="identity")
View(x)
df<-fatality_df_V1 %>%
group_by(STATE,ST_CASE) %>%
summarise(state_fatal=sum(FATALS))
ggplot(df, aes(x=STATE, y=fatal)) +
geom_bar(stat="identity", width=.5, fill="tomato3") +
labs(title="Ordered Bar Chart",
subtitle="Make Vs Avg. Mileage",
caption="source: mpg") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
View(df)
ggplot(df, aes(x=STATE, y=state_fatal)) +
geom_bar(stat="identity", width=.5, fill="tomato3") +
labs(title="Ordered Bar Chart",
subtitle="Make Vs Avg. Mileage",
caption="source: mpg") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
ggplot(df, aes(x=STATE, y=state_fatal)) +
geom_bar(stat="identity", width=.5, fill="tomato3") + coord_flip()
labs(title="Ordered Bar Chart",
subtitle="Make Vs Avg. Mileage",
caption="source: mpg") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
g<-ggplot(fatality_df_V1 %>%
group_by(STATE,ST_CASE) %>%
state_fatal=sum(FATALS))
g<-ggplot(fatality_df_V1 %>%
group_by(STATE,ST_CASE) %>%
summarise(state_fatal=sum(FATALS)))
geom_bar(aes(x=STATE,y=state_fatal))+coord_flip()
g<-ggplot(fatality_df_V1 %>%
group_by(STATE,ST_CASE) %>%
summarise(state_fatal=sum(FATALS)))
g+geom_bar(aes(x=STATE,y=state_fatal))+coord_flip()
g+geom_bar(aes(x=state_fatal,y=STATE))+coord_flip()
g+geom_bar(aes(x=state_fatal,y=STATE,stat="identity"))+coord_flip()
g+geom_bar(aes(x=STATE,y=state_fatal,stat="identity"))+coord_flip()
View(g)
View(g1)
View(g2)
View(g3)
print(g+geom_bar(aes(x=STATE,y=state_fatal,stat="identity"))+coord_flip())
ggplot(data=fatality_df_V1, aes(fatality_df_V1$HOUR,color=GENDER na.rm=TRUE)) +
geom_histogram(breaks=seq(0, 24, by=1),
fill="#ffff88", alpha=0.4) +
labs(x="Hour of Day", y="Number of Accidents")
ggplot(data=fatality_df_V1, aes(fatality_df_V1$HOUR, na.rm=TRUE)) +
geom_histogram(breaks=seq(0, 24, by=1),
fill="#ffff88", alpha=0.4) +
labs(x="Hour of Day", y="Number of Accidents")
ggplot(fatality_df_V1) + geom_bar(aes(x=STATE, fill=GENDER)) +
scale_x_discrete(limits = (fatality_df_V1 %>% count(STATE)
%>% arrange(n))$STATE) +
coord_flip() +
labs(title="Accidents by Neighborhood and District",
x="Neighborhood", y="Count", fill="District")
ggplot(fatality_df_V1, !is.na(GENDER)) + geom_bar(aes(x=STATE, fill=GENDER)) +
scale_x_discrete(limits = (fatality_df_V1 %>% count(STATE)
%>% arrange(n))$STATE) +
coord_flip() +
labs(title="Accidents by Neighborhood and District",
x="Neighborhood", y="Count", fill="District")
ggplot(fatality_df_V1) + geom_bar(aes(x=STATE, fill=!is.na(GENDER))) +
scale_x_discrete(limits = (fatality_df_V1 %>% count(STATE)
%>% arrange(n))$STATE) +
coord_flip() +
labs(title="Accidents by Neighborhood and District",
x="Neighborhood", y="Count", fill="District")
ggplot(fatality_df_V1) + geom_bar(aes(x=STATE, fill=!is.na(AGE_GROUP))) +
scale_x_discrete(limits = (fatality_df_V1 %>% count(STATE)
%>% arrange(n))$STATE) +
coord_flip() +
labs(title="Accidents by Neighborhood and District",
x="Neighborhood", y="Count", fill="District")
ggplot(fatality_df_V1) + geom_bar(aes(x=STATE, fill=(AGE_GROUP))) +
scale_x_discrete(limits = (fatality_df_V1 %>% count(STATE)
%>% arrange(n))$STATE) +
coord_flip() +
labs(title="Accidents by Neighborhood and District",
x="Neighborhood", y="Count", fill="District")
ggplot(fatality_df_V1) + geom_bar(aes(x=HIT_RUN)) +
scale_x_discrete(limits = (traffic %>% count(HIT_RUN)
%>% arrange(n))$HIT_RUN) +
labs(title="Number of Accidents by Offense Type",
x="Offense Type", y="Count") +
coord_flip()
ggplot(fatality_df_V1) + geom_bar(aes(x=HIT_RUN)) +
scale_x_discrete(limits = (fatality_df_V1 %>% count(HIT_RUN)
%>% arrange(n))$HIT_RUN) +
labs(title="Number of Accidents by Offense Type",
x="Offense Type", y="Count") +
coord_flip()
ggplot(fatality_df_V1) + geom_bar(aes(x=HIT_RUN,fill=(AGE_GROUP))) +
scale_x_discrete(limits = (fatality_df_V1 %>% count(HIT_RUN)
%>% arrange(n))$HIT_RUN) +
labs(title="Number of Accidents by Offense Type",
x="Offense Type", y="Count") +
coord_flip()
ggplot(fatality_df_V1) + geom_bar(aes(x=WEATHER_CONDITION,fill=(AGE_GROUP))) +
scale_x_discrete(limits = (fatality_df_V1 %>% count(HIT_RUN)
%>% arrange(n))$HIT_RUN) +
labs(title="Number of Accidents by Offense Type",
x="Offense Type", y="Count") +
coord_flip()
ggplot(fatality_df_V1) + geom_bar(aes(x=WEATHER_CONDITION,fill=(AGE_GROUP))) +
scale_x_discrete(limits = (fatality_df_V1 %>% count(WEATHER_CONDITION)
%>% arrange(n))$WEATHER_CONDITION) +
labs(title="Number of Accidents by Offense Type",
x="Offense Type", y="Count") +
coord_flip()
ggplot(fatality_df_V1) + geom_bar(aes(x=WEATHER_CONDITION,fill=(AGE_GROUP))) +
scale_x_discrete(limits = (fatality_df_V1 %>% count(WEATHER_CONDITION)
%>% arrange(n))$WEATHER_CONDITION) +
labs(title="Number of Accidents by Offense Type",
x="Offense Type", y="Count")
ggplot(fatality_df_V1) + geom_bar(aes(x=WEATHER_CONDITION,fill=(AGE_GROUP), na.rm=TRUE)) +
scale_x_discrete(limits = (fatality_df_V1 %>% count(WEATHER_CONDITION)
%>% arrange(n))$WEATHER_CONDITION) +
labs(title="Number of Accidents by Offense Type",
x="Offense Type", y="Count")
ggplot(fatality_df_V1, , na.rm=TRUE) + geom_bar(aes(x=WEATHER_CONDITION,fill=(AGE_GROUP))) +
scale_x_discrete(limits = (fatality_df_V1 %>% count(WEATHER_CONDITION)
%>% arrange(n))$WEATHER_CONDITION) +
labs(title="Number of Accidents by Offense Type",
x="Offense Type", y="Count")
ggplot(fatality_df_V1,na.rm=TRUE) + geom_bar(aes(x=SPEED_INVOLVED,fill=(AGE_GROUP))) +
scale_x_discrete(limits = (fatality_df_V1 %>% count(WEATHER_CONDITION)
%>% arrange(n))$WEATHER_CONDITION) +
labs(title="Number of Accidents by Offense Type",
x="Offense Type", y="Count")
ggplot(fatality_df_V1,na.rm=TRUE) + geom_bar(aes(x=SPEED_INVOLVED,fill=(AGE_GROUP))) +
scale_x_discrete(limits = (fatality_df_V1 %>% count(SPEED_INVOLVED)
%>% arrange(n))$SPEED_INVOLVED) +
labs(title="Number of Accidents by Offense Type",
x="Offense Type", y="Count")
ggplot(fatality_df_V1,na.rm=TRUE) + geom_bar(aes(x=SPEED_INVOLVED,fill=(AGE_GROUP))) +
scale_x_discrete(limits = (fatality_df_V1 %>% count(SPEED_INVOLVED)
%>% arrange(n))$SPEED_INVOLVED) +
labs(title="Number of Accidents by Offense Type",
x="Offense Type", y="Count") + coord_flip()
ggplot(fatality_df_V1,na.rm=TRUE) + geom_bar(aes(x=STATE,fill=(SPEED_INVOLVED))) +
scale_x_discrete(limits = (fatality_df_V1 %>% count(STATE)
%>% arrange(n))$STATE) +
labs(title="Number of Accidents by Offense Type",
x="Offense Type", y="Count") + coord_flip()
